{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["defaultText","renderer","marked","Renderer","link","href","title","text","prototype","call","this","replace","setOptions","App","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","state","input","handleChange","bind","assertThisInitialized","event","setState","target","value","react_default","a","createElement","id","className","onChange","dangerouslySetInnerHTML","__html","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAIIA,EAAW,m2CAmETC,EAAW,IAAIC,IAAOC,SAC1BF,EAASG,KAAO,SAASC,EAAMC,EAAOC,GACtC,OADwDL,IAAOC,SAASK,UAAUJ,KAAKK,KAAKC,KAAML,EAAMC,EAAOC,GACnGI,QAAQ,KAAK,iDAG3BT,IAAOU,WAAW,CACdX,SAAUA,QAyCCY,cArCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAAG,IACjBE,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAH,GAAAJ,KAAAC,KAAMI,KAEDM,MAAQ,CACXC,MAAOrB,GAGTe,EAAKO,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAPHA,4EAUNU,GACXf,KAAKgB,SAAS,CACZL,MAAOI,EAAME,OAAOC,yCAKtB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,OACNH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,yDAEFF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,QACbJ,EAAAC,EAAAC,cAAA,YAAUC,GAAG,SAASE,SAAUxB,KAAKY,aAAcM,MAAOlB,KAAKU,MAAMC,QACrEQ,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UAAUG,wBAAyB,CAACC,OAAQlC,IAAOQ,KAAKU,MAAMC,YAG1EQ,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,KAAGJ,OAAO,SAASU,IAAI,sBAAsBhC,KAAK,+BAAlD,aADF,iDA9BUiC,aCpEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.77b5ca6e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport marked from 'marked';\n\nvar defaultText = `___\n*Want lo learn how to do pages like this yourself? Access* **[FreeCodeCamp](https://www.freecodecamp.org)** *and learn how to program in JavaScript today!*\n___\nOtherwise, just edit your text at left, considering the examples below:\n___\n\n# Title 1\n## Subtitle 2\n### Subsubtitle 3\n#### Subsubsubtitle 4\n##### Subsubsubsubtitle 5\n###### Subsubsubsubsubtitle 6\n\n## Text styles\n\n**This is a bold text**\n\n_This is an italic text_\n\n~~Strikethrough your text~~\n\n## Blockquotes\n\n> You can input blockquotes\n>> You can even create sublevels\n>>> As many sublevels as you need!\n\n## Lists\n\n* This is a list of items\n* You can even create sublists\n  * That can be arranged by double spaces before the \\`*\\` mark\n    * Again, this can be made in several levels\n* And can reference it back properly!\n\n### Ordered Lists\n\n1. You can insert ordered lists\n1. By starting every line with \\`1.\\`\n1. It increments automatically.\n\n\n## Code\n\n\\`this is considered\\` inline code\n\nTo insert indented code, put four spaces before the code, like this:\n\n    it renders the code automatically\n    // even comments\n\n\nFor multiline code, you can even add \\`\\`\\`\n\n\\`\\`\\`\nLike this\n\\`\\`\\`\n\n## Images\n\nYou can also add images like this:\n\n![Hello Cthulhu](https://i.pinimg.com/236x/49/19/92/491992d5ed514a3f137d0c4a7639f9a7.jpg)\n\n*Cthulhu wanna be your friend!*`;\n\n\nconst renderer = new marked.Renderer();\n  renderer.link = function(href, title, text) {var link = marked.Renderer.prototype.link.call(this, href, title, text);\n  return link.replace(\"<a\",\"<a target='_blank' rel='noopener noreferrer'\");\n};\n\nmarked.setOptions({\n    renderer: renderer\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input: defaultText\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n\n  render() {\n    return(\n      <div id=\"App\">\n        <header>\n          <h1>WINAMP</h1>\n          <h2>(WINAMP Is Not Another Markdown Previewer)</h2>\n        </header>\n        <main>\n          <div className=\"main\">\n            <textarea id=\"editor\" onChange={this.handleChange} value={this.state.input}></textarea>\n            <div id=\"preview\" dangerouslySetInnerHTML={{__html: marked(this.state.input)}}></div>\n          </div>\n        </main>\n        <footer>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/friarhob\">Friar Hob</a> wishes you all to have a great life!\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}